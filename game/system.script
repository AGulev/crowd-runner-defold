local utils = require("game.utils")

local player_entity = nil
local enemies = {}

local TARGET_FPS = 60
local TEMP_VECTOR = vmath.vector3(0) -- For memory optimization
local BOX_HALF_SIZE = 3200 -- 530 / 800 / 1700 / 2500 / 4500
local ENEMIES_COUNT = 32000 -- 2048 / 3300 / 10000 / 16000 / 32000
local FAR_DISTANCE = 200

local uid = 0
local function create_entity(game_object, pos)
	local entity = {
		uid = uid,
		game_object = game_object,
		sprite_url = msg.url(nil, game_object, "sprite"),
		-- avoid using vector3 user date to speedup calculations
		position_x = pos.x,
		position_y = pos.y,
		position_previous_x = pos.x,
		position_previous_y = pos.y,
		move_vector_x = 0,
		move_vector_y = 0,
		comp_vector_x = 0,
		comp_vector_y = 0,
		radius = 22,
		speed = 7,
		anim_current = nil,
		anim_run = "enemy_run",
		anim_idle = "enemy_idle",
		is_flip = false,
		frame_last_update = 0
	}
	uid = uid + 1
	utils.octotree_add(entity)
	return entity
end


local function calculate_comp_vector(entity)
	utils.octotree_foreach(entity, function(other)
		local x = other.position_x - entity.position_x
		local y = other.position_y - entity.position_y
		local distance = math.sqrt(x * x + y * y)
		if distance ~= 0 then
			-- Calc comp vector
			x = x / distance
			y = y / distance
			if distance < entity.radius + other.radius then
				-- need to apply comp vector
				entity.comp_vector_x = entity.comp_vector_x - x
				entity.comp_vector_y = entity.comp_vector_y - y

				other.comp_vector_x = other.comp_vector_x + x
				other.comp_vector_y = other.comp_vector_y + y
			end
		end
	end)
end


local function calculate_move_vector(entity, other)
	if entity == other then
		return
	end

	entity.move_vector_x, entity.move_vector_y = 0, 0

	local x = other.position_x - entity.position_x
	local y = other.position_y - entity.position_y
	local distance = math.sqrt(x * x + y * y)
	if distance ~= 0 and distance < FAR_DISTANCE then
		-- Normalize
		x = x / distance
		y = y / distance
		-- Need to apply move_vector
		entity.move_vector_x = entity.move_vector_x - x
		entity.move_vector_y = entity.move_vector_y - y
	end
end


local thresholds = {
	[300] = 2,
	[500] = 4,
	[600] = 8,
	[800] = math.huge,
}


local function is_skip_frame(entity, frame)
	local x = entity.position_x - player_entity.position_x
	local y = entity.position_y - player_entity.position_y
	local distance = math.sqrt(x * x + y * y)
	local threshold = 1
	for t_dist, t_value in pairs(thresholds) do
		if distance > t_dist and threshold < t_value then
			threshold = t_value
		end
	end

	return (frame + entity.uid) % threshold ~= 0
end

local function update_entity(entity, frame, dt)
	if is_skip_frame(entity, frame) then
		return
	end

	-- Physics
	calculate_comp_vector(entity, utils.octotree_get_for(entity))
	calculate_move_vector(entity, player_entity)

	-- Get move delta vector
	local x = entity.move_vector_x + entity.comp_vector_x
	local y = entity.move_vector_y + entity.comp_vector_y
	x = x * entity.speed * TARGET_FPS
	y = y * entity.speed * TARGET_FPS
	entity.comp_vector_x = 0
	entity.comp_vector_y = 0

	-- Apply delta to position
	entity.position_previous_x = entity.position_x
	entity.position_previous_y = entity.position_y
	entity.position_x = entity.position_x + x * dt
	entity.position_y = entity.position_y + y * dt

	-- Restrict box size
	entity.position_x = math.min(math.max(entity.position_x, -BOX_HALF_SIZE), 960 + BOX_HALF_SIZE)
	entity.position_y = math.min(math.max(entity.position_y, -BOX_HALF_SIZE), 640 + BOX_HALF_SIZE)

	utils.octotree_update(entity)

	utils.check_flip(entity)
	utils.check_animation(entity)


	-- Update move using lua user data vector3
	TEMP_VECTOR.x = entity.position_x
	TEMP_VECTOR.y = entity.position_y
	TEMP_VECTOR.z = utils.get_z_position(entity)
	go.set_position(TEMP_VECTOR, entity.game_object)
end



function init(self)
	self.frame = 0
	msg.post(".", "acquire_input_focus")
	local player_id = go.get_id("/player")
	player_entity = create_entity(player_id, go.get_position(player_id))
	player_entity.anim_run = "player_run"
	player_entity.anim_idle = "player_idle"
	player_entity.speed = 6

	for i = 1, ENEMIES_COUNT do
		TEMP_VECTOR.x = math.random(0 + 32 - BOX_HALF_SIZE, 960 - 32 + BOX_HALF_SIZE)
		TEMP_VECTOR.y = math.random(0 + 32 - BOX_HALF_SIZE, 640 - 32 + BOX_HALF_SIZE)
		local enemy_game_object = factory.create("#factory_enemy", TEMP_VECTOR, nil, nil, 4)
		table.insert(enemies, create_entity(enemy_game_object, TEMP_VECTOR))
	end
end


function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	self.frame = self.frame + 1
	update_entity(player_entity, self.frame, dt)
	for index = 1, #enemies do
		update_entity(enemies[index], self.frame, dt)
	end
end


function on_input(self, action_id, action)
	if action_id == hash("key_a") then
		player_entity.move_vector_x = action.released and 0 or -1
	end

	if action_id == hash("key_d") then
		player_entity.move_vector_x = action.released and 0 or  1
	end

	if action_id == hash("key_w") then
		player_entity.move_vector_y = action.released and 0 or  1
	end

	if action_id == hash("key_s") then
		player_entity.move_vector_y = action.released and 0 or -1
	end

	if action_id == hash("key_p") and action.pressed then
		self._profiler_enabled = not self._profiler_enabled
		profiler.enable_ui(self._profiler_enabled)
	end
end
